func (clientVal *Client) sendRequest(requestMethod, endpointUrl string, bodyParams interface{}, respData interface{}) error {
	requestUrl, _ := clientVal.baseUrl.Parse(endpointUrl)

	fmt.Println(requestUrl.String())
	fmt.Println(bodyParams)

	var reqBody io.Reader
	if bodyParams != nil {
		// Encode the request body to JSON
		body, err := json.Marshal(bodyParams)
		if err != nil {
			return fmt.Errorf("http client can not  json marshal bodyParams : %v", err)
		}
		//change the body to bytes
		reqBody = bytes.NewReader(body)
	}

	request, err := http.NewRequest(requestMethod, requestUrl.String(), reqBody)
	if err != nil {
		return fmt.Errorf(" can not create termii request : %v", err)
	}

	// Set the request headers
	request.Header.Set("Content-Type", "application/json")

	// Perform the request
	responseReceived, err := clientVal.client.Do(request)
	if err != nil {
		return fmt.Errorf("http client unable to process the request: %v", err)
	}
	//close the response body
	defer responseReceived.Body.Close()

	// Read the response body
	responseBody, err := ioutil.ReadAll(responseReceived.Body)
	if err != nil {
		return fmt.Errorf("unable to read response body: %v", err)
	}

	// Check for successful response (2xx status code)
	//if err := checkStatusCode(responseReceived.StatusCode); err != nil {
	//	return err
	//}

	// Unmarshal the response body into the provided respData interface
	if respData != nil {
		//if err := checkStatusCode(responseReceived.StatusCode); err != nil {
		//	return err
		//}
		if err := json.Unmarshal(responseBody, respData); err != nil {
			return fmt.Errorf("unable to unmarshal response body: %v", err)
		}
	}
	return nil
}

// checkStatusCode checks if the HTTP status code is expected.
func checkStatusCode(statusCode int) error {
	if statusCode != http.StatusOK && statusCode != http.StatusNoContent && statusCode != http.StatusCreated {
		return fmt.Errorf("error received, got status code %v", statusCode)
	}
	return nil
}